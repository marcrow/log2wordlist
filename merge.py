import argparse
from collections import Counter

def merge_wordlists(output_file, *input_files):
    """Merge multiple wordlists into one and remove duplicates."""
    merged_entries = set()
    for input_file in input_files:
        try:
            with open(input_file, 'r') as file:
                merged_entries.update(line.strip() for line in file)
        except FileNotFoundError:
            print(f"Warning: File '{input_file}' not found. Skipping.")

    with open(output_file, 'w') as file:
        for entry in sorted(merged_entries):
            file.write(f"{entry}\n")
    print(f"Merged wordlists saved to '{output_file}'.")

def merge_stats(output_file, *input_files):
    """Merge multiple statistics files and aggregate counts."""
    merged_counts = Counter()
    for input_file in input_files:
        try:
            with open(input_file, 'r') as file:
                for line in file:
                    endpoint, count = line.rsplit(' ', 1)
                    merged_counts[endpoint] += int(count)
        except FileNotFoundError:
            print(f"Warning: File '{input_file}' not found. Skipping.")
        except ValueError:
            print(f"Warning: Malformed line in file '{input_file}'. Skipping.")

    with open(output_file, 'w') as file:
        for endpoint, count in merged_counts.items():
            file.write(f"{endpoint} {count}\n")
    print(f"Merged statistics saved to '{output_file}'.")

def main():
    parser = argparse.ArgumentParser(description="Merge wordlists or statistics files generated by log2wordlist.py.")
    parser.add_argument('-o', '--output', required=True, help="Path to save the merged file.")
    parser.add_argument('-t', '--type', required=True, choices=['wordlist', 'stats'],
                        help="Type of files to merge: 'wordlist' or 'stats'.")
    parser.add_argument('input_files', nargs='+', help="Paths to the input files to merge.")

    args = parser.parse_args()

    if args.type == 'wordlist':
        merge_wordlists(args.output, *args.input_files)
    elif args.type == 'stats':
        merge_stats(args.output, *args.input_files)

if __name__ == "__main__":
    main()